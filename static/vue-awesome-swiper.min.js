var swiper = getSwiper('.swiper-box');
var slides = getSlides(swiper);
var swiperWidth = getSwiperWidth(swiper);
var slidesNumber = slides.length;
var activeSlide = 0;
var config = {
    interval: 800,
    duration: 800
}
var sliding = false;
var pos = {
    init: 0,
    start: 0,
    move: 0,
    end: 0,
    now: 0
}
var startTime = 0;
var moveTime = 0;

function toArray(arraylike) {
    return Array.prototype.slice.call(arraylike);
}

function getSwiper(selector) {
    return document.querySelector(selector);
}

function getSlides(swiper) {
    return toArray(swiper.children);
}

function getSwiperWidth(swiper) {
    return document.body.clientWidth;
}

function translateX(el, v) {
    el.style.transform = 'translateX(' + v + 'px)';
}

function transitionDuration(el, v) {
    el.style.transitionDuration = v + 'ms';
}

function reset() {
    activeSlide = 0;
}
var head = slides[0].cloneNode(true);
var tail = slides[slides.length - 1].cloneNode(true);
swiper.insertBefore(tail, slides[0]);
swiper.appendChild(head);

function x() {
    return -swiperWidth - (swiperWidth * activeSlide);
}
var initTimer = null;
var slidingTimer = null;
translateX(swiper, x());

function run() {
    swiper.removeEventListener('touchstart', s, false);
    swiper.removeEventListener('touchmove', m, false);
    swiper.removeEventListener('touchend', e, false);
    activeSlide++;
    translateX(swiper, x());
    transitionDuration(swiper, config.duration)
}
initTimer = setTimeout(function() {
    clearTimeout(initTimer)
    run();
}, config.interval);
swiper.addEventListener('transitionend', function() {
    sliding = false;
    swiper.addEventListener('touchstart', s, false);
    swiper.addEventListener('touchmove', m, false);
    swiper.addEventListener('touchend', e, false);
    /*
    这里做判断, 如果已经滑动到最后一个元素, 会显示成第一个, 我们之所以加这个是因为我们希望
    在第一个和最后一个左右滑动的时候不会出现空白, 而不是因为 无缝滚动的需求. 
    slidesNumber 要默认加个 2, 因为追加的两个元素,
    activeSlide 的起点为 1, 最高只能达到 slidesNumber + 2 -1, 也就是  
    */
    console.log(activeSlide)
    if (activeSlide == slidesNumber) {
        transitionDuration(swiper, 0);
        activeSlide = 0;
        translateX(swiper, x());
    } else if (activeSlide == -1) {
        transitionDuration(swiper, 0);
        activeSlide = slidesNumber - 1;
        translateX(swiper, x());
    }
    slidingTimer = setTimeout(function() {
        clearTimeout(slidingTimer);
        run();
    }, config.interval);
}, false);

function s(e) {
    pos.start = e.targetTouches[0].pageX;
}

function m(e) {
    pos.move = e.targetTouches[0].pageX;
    moveTime = +new Date();
    var distance = pos.start - pos.move;
    clearTimeout(initTimer)
    clearTimeout(slidingTimer);
    transitionDuration(swiper, 0);
    translateX(swiper, -swiperWidth * (activeSlide + 1) - distance);
}

function e(e) {
    pos.end = e.changedTouches[0].pageX;
    var distance = Math.abs(pos.start - pos.end)
    if (pos.start - pos.end > 0) {
        if (distance > 120) {
            if (sliding) {} else {
                transitionDuration(swiper, 300);
                activeSlide++;
                translateX(swiper, x())
            }
        } {
            transitionDuration(swiper, 300);
            translateX(swiper, x())
        }
    } else if (pos.start - pos.end < 0) {
        if (distance > 120) {
            if (sliding) {} else {
                transitionDuration(swiper, 300);
                activeSlide--;
                translateX(swiper, x())
            }
        } else {
            transitionDuration(swiper, 300);
            translateX(swiper, x())
        }
    }
}
swiper.addEventListener('touchstart', s, false);
swiper.addEventListener('touchmove', m, false);
swiper.addEventListener('touchend', e, false);

document.querySelector('.swiper-container').addEventListener('touchstart', function(e) {
    e.preventDefault();
    e.stopPropagation();
}, false)